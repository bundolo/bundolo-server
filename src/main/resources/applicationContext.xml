<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="properties" ref="properties" />
	</bean>

	<bean id="slugifyPropertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="properties" ref="slugifyProperties" />
	</bean>

	<bean id="properties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="ignoreResourceNotFound" value="true" />
  		<property name="locations">
            <list>
                <value>classpath:#{systemProperties.env}.properties</value>
                <value>file:${user.home}/projects/bundolo/server/application.properties</value>
            </list>
        </property>
	</bean>
	<bean id="slugifyProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
  		<property name="locations">
            <list>
                <value>classpath:slugify/replacements.properties</value>
            </list>
        </property>
	</bean>
	<context:component-scan base-package="org.bundolo" />

	<task:annotation-driven executor="myExecutor" scheduler="myScheduler" />

	<task:executor id="myExecutor" pool-size="5" />

	<task:scheduler id="myScheduler" pool-size="10" />

	<tx:annotation-driven />

	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="BundoloPostgresPersistenceUnit" />
		<property name="jpaPropertyMap">
			<map>
				<entry key="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect" />
				<entry key="hibernate.connection.driver_class" value="org.postgresql.Driver" />
				<entry key="hibernate.connection.url" value="${hibernate.connection.url}" />
				<entry key="hibernate.connection.username" value="${hibernate.connection.username}" />
				<entry key="hibernate.connection.password" value="${hibernate.connection.password}" />
			</map>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<bean id="mailingUtils" class="org.bundolo.MailingUtils"/>
	<bean id="dateUtils" class="org.bundolo.DateUtils"/>
	<bean id="slugifyUtils" class="org.bundolo.SlugifyUtils"/>

	<!-- security -->
	<!-- Creates the springSecurityFilterChain with the customer filter customRestFilter injected.  -->
    <security:http create-session="stateless" entry-point-ref="authenticationEntryPoint" authentication-manager-ref="authenticationManager">
        <security:custom-filter ref="customRestFilter" position="BASIC_AUTH_FILTER" />
        <security:intercept-url pattern="/page/**" method="POST" access="ROLE_USER" /> <!-- just an example -->
    </security:http>

    <bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
        <property name="realmName" value="Not authorized" />
    </bean>

    <!-- Our customer Basic Authentication Filter. This can be replaced with what ever authentication process you wish -->
    <bean id="customRestFilter" class="org.bundolo.security.CustomRestSecurityFilter">
        <constructor-arg name="authenticationManager" ref="authenticationManager" />
    </bean>

    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="restAuthenticationProvider" />
    </security:authentication-manager>

    <!-- The restAuthenticationProvider is the class responsible for verifying that the username and password are valid and
    returning an AuthenticationToken matching the user requesting the resource and the user's access level.
    This is the place where you would normally hook into a more complex authentication system and user data layer. -->
    <bean id="restAuthenticationProvider" class="org.bundolo.security.RestAuthenticationProvider" />

    <bean id="freemarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
		<property name="templateLoaderPath" value="classpath:/freemarker/"/>
 	</bean>

 	<bean id="messages" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="i18n/messages" />
        <property name="defaultEncoding" value="UTF-8" />
    </bean>
</beans>
